/* You are tasked with analyzing the sales performance of a coffee shop chain using their transactional data stored in a PostgreSQL database */ 

/* First create the table */

CREATE TABLE coffee_shop (
transaction_id INT PRIMARY KEY,
transaction_date DATE,
transaction_time TIME,
transaction_qty INT,
store_id INT,
stroe_location TEXT,
product_id INT,
unit_price DECIMAL,
product_category TEXT,
product_type TEXT,
product_detail TEXT
);




/* Top 5 most frequently sold products by product category */

SELECT product_id, product_category, SUM(transaction_qty) AS total_quantity_sold
FROM shop
GROUP BY product_id, product_category
ORDER BY total_quantity_sold DESC
LIMIT 5;


| ID   | drink                | value |
|------|----------------------|-------|
| 50   | "Tea"                | 4708  |
| 59   | "Drinking Chocolate" | 4668  |
| 54   | "Tea"                | 4643  |
| 38   | "Coffee"             | 4602  |
| 44   | "Tea"                | 4564  |




/* Total revenue generated by each store in January 2023 */

SELECT store_id, store_location, '$'||(TO_CHAR(SUM(unit_price*transaction_qty), '99G999G999')) AS revenue_generated
FROM shop
WHERE transaction_date BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY store_id, store_location
ORDER BY revenue_generated DESC;


| ID   | location            |  value   |
|------|---------------------|----------|
| 8    | "Hell's Kitchen"    | $27.821  |
| 3    | "Astoria"           | $27.314  |
| 5    | "Lower Manhattan"   | $26.543  |




/* Unique product types sold in the 'Lower Manhattan' store */

SELECT DISTINCT(product_type) AS Item
FROM shop
WHERE store_location = 'Lower Manhattan';


Here is the information rewritten in a tabular format:

| Item                          |
|-------------------------------|
| "Clothing"                   |
| "Organic Chocolate"          |
| "Barista Espresso"           |
| "Herbal tea"                 |
| "Brewed Chai tea"            |
| "Green tea"                  |
| "Gourmet Beans"              |
| "Hot chocolate"              |
| "Premium brewed coffee"      |
| "Biscotti"                   |
| "Brewed Black tea"           |
| "Premium Beans"              |
| "Brewed Green tea"           |
| "Organic brewed coffee"      |
| "Espresso Beans"             |
| "Black tea"                  |
| "Green beans"                |
| "Regular syrup"              |
| "Housewares"                 |
| "Scone"                      |
| "Chai tea"                   |
| "Brewed herbal tea"          |
| "Drip coffee"                |
| "Organic Beans"              |
| "House blend Beans"          |
| "Pastry"                     |
| "Gourmet brewed coffee"      |
| "Drinking Chocolate"         |
| "Sugar free syrup"           |




/* Total number of transactions before 12:00 PM */

SELECT TO_CHAR(COUNT(transaction_qty), '999G999') AS transactions_before_12
FROM shop
WHERE transaction_time<'12:00:00';


|   transactions_before_12   |
|----------------------------|
|            81.751          |




/* Average revenue per transaction for each product category during peak (7AM-9AM) and non-peak hours */


SELECT product_category, 
TO_CHAR(AVG(CASE WHEN transaction_time BETWEEN '07:00:00' AND '09:00:00' THEN (transaction_qty * unit_price) END), '$99.99') AS avg_revenue_peak,
TO_CHAR(AVG(CASE WHEN transaction_time NOT BETWEEN '07:00:00' AND '09:00:00' THEN (transaction_qty * unit_price) END), '$99.99') AS avg_revenue_non_peak
FROM shop
GROUP BY product_category;


| Category             | avg_revenue_peak | avg_revenue_non_peak |
|----------------------|------------------|----------------------|
| "Bakery"             | "$3.61"          | "$3.61"              |
| "Branded"            | "$19.86"         | "$17.64"             |
| "Coffee"             | "$4.64"          | "$4.62"              |
| "Coffee beans"       | "$20.56"         | "$23.64"             |
| "Drinking Chocolate" | "$6.50"          | "$6.27"              |
| "Flavours"           | "$1.22"          | "$1.25"              |
| "Loose Tea"          | "$9.17"          | "$9.30"              |
| "Packaged Chocolate" | "$9.67"          | "$8.82"              |
| "Tea"                | "$4.36"          | "$4.31"              |




/* Which is te product with the most price fluctuations? Retrieve the product that has the largest difference between its highest and lowest price across all transactions */


SELECT product_type, product_detail, (MIN(unit_price) - MAX(unit_price)) AS price_fluctuation
FROM shop
GROUP BY product_type, product_detail
ORDER BY price_fluctuation
LIMIT 1;


| product_type     | product_detail        | price_fluctuation |
|------------------|-----------------------|-------------------|
| "Organic Beans"  | "Organic Decaf Blend" | -16.00            |




/* List all products that have been sold in every store at least once */


SELECT product_detail
FROM shop
GROUP BY product_detail
HAVING COUNT(DISTINCT store_id) = (SELECT COUNT(DISTINCT store_id) FROM shop);


| Product Name              |
|---------------------------|
| "Brazilian Rg"           |
| "Brazilian Sm"           |
| "Cappuccino"             |
| "Cappuccino Lg"          |
| "Carmel syrup"           |
| "Chili Mayan"            |
| "Chocolate Chip Biscotti"|




/* Identify the top 5 days where the total transaction quantity deviated the most from the average daily transaction quantity */


SELECT transaction_date, total_qty, deviation
FROM (SELECT transaction_date, SUM(transaction_qty) AS total_qty,AVG(SUM(transaction_qty)) OVER () AS avg_qty,
ABS(SUM(transaction_qty) - AVG(SUM(transaction_qty)) OVER ()) AS deviation FROM shop
GROUP BY transaction_date
) AS Daily_Transactions
ORDER BY deviation DESC
LIMIT 5;


| Date       | Total Quantity | Deviation       |
|------------|----------------|-----------------|
| 2023-06-27 | 1962           | 777.082872928   |
| 2023-06-13 | 1938           | 753.082872928   |
| 2023-06-19 | 1858           | 673.082872928   |
| 2023-06-24 | 1846           | 661.082872928   |
| 2023-06-26 | 1837           | 652.082872928   |




/* Retrieve store locations and total revenue for stores where the average unit price is greates than $2.50 */


SELECT store_location, TO_CHAR(SUM(transaction_qty * unit_price), '$999G999G999D99') AS total_revenue, TO_CHAR(AVG(unit_price), '$9D99') AS avg_price
FROM shop
GROUP BY store_location
HAVING AVG(unit_price) > 2.50;


| store_location    | total_revenue     | avg_price |
|-------------------|-------------------|-----------|
| Astoria           | $232,243.91       | $3.38     |
| Hell's Kitchen    | $236,511.17       | $3.39     |
| Lower Manhattan   | $230,057.25       | $3.37     |

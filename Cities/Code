This database has information about cities all around the world


/* Let's create the tables and add a SERIAL PRIMARY KEY to each one */

CREATE TABLE cities (
city_name VARCHAR(100),
latitude DECIMAL(9,6),
longitude DECIMAL(9,6),
country_code_2 CHAR(2),
capital BOOLEAN,
popultation INT,
insert_date DATE
)


ALTER TABLE cities
ADD city_id SERIAL PRIMARY KEY


CREATE TABLE countries (
country_name TEXT,
country_code_2 TEXT,
country_code_3 TEXT,
region TEXT,
sub_region TEXT,
intermediate_region TEXT
)


ALTER TABLE countries
ADD county_id SERIAL PRIMARY KEY


CREATE TABLE currencies (
country_code_2 TEXT,
currency_name TEXT,
currency_code TEXT
)


ALTER TABLE currencies
ADD currency_id SERIAL PRIMARY KEY


CREATE TABLE languages (
language TEXT,
country_code_2 TEXT
)


ALTER TABLE languages 
ADD languages_id SERIAL PRIMARY KEY




/* The data has to be cleaned, so we will do these steps with each of the four tables*/

UPDATE countries
SET country_name = TRIM(country_name);

BEGIN;
UPDATE countries
SET
country_name = TRANSLATE(country_name, '!¡?¿*$#%&', ''),
sub_region = TRANSLATE(sub_region, '¿?!¡$%€*#', ''),
region = TRANSLATE(region, '¿?!¡$%€*#', ''),
intermediate_region = TRANSLATE(intermediate_region, '¿?!¡$%€*#', '');
COMMIT;


UPDATE countries
SET
	country_name = LOWER(country_name),
	country_code_2 = LOWER(country_code_2),
	country_code_3 = LOWER(country_code_3),
	region = LOWER(region),
	sub_region = LOWER(sub_region), 
	intermediate_region = LOWER(intermediate_region);




/* Now we have to see if there are duplicates in the tables and remove them */

SELECT country_code_2, COUNT(*)
FROM countries
GROUP BY country_code_2
HAVING COUNT(*) > 1;


| country_code_2 | count |
|----------------|-------|
| "al"           | 2     |
| "cn"           | 3     |
| "sa"           | 2     |
| "ie"           | 2     |
| "ly"           | 2     |
| "mo"           | 2     |
| "re"           | 2     |
| "ph"           | 2     |
| "zw"           | 2     |
| "az"           | 2     |
| "kw"           | 2     |
| "cy"           | 3     |
| "rs"           | 2     |
| "mh"           | 2     |




/* Let's delete the duplicates */

DELETE FROM countries AS table_1
USING countries AS table_2
WHERE table_1.country_id > table_2.country_id
AND table_1.country_code_2 = table_2.country_code_2;




/* List all of the regions and the total number of countries in each region. Order by country count in descending order and capitalize the region name */

SELECT INITCAP(region), COUNT(*) 
FROM countries
GROUP BY region
ORDER BY COUNT(*) DESC;


| continent  | count |
|------------|-------|
| "Africa"   | 59    |
| "Americas" | 57    |
| "Asia"     | 50    |
| "Europe"   | 48    |
| "Oceania"  | 26    |
| "Antartica"| 1     |




/* List all of the sub-regions and the total number of cities in each sub-region. Order by sub-region name alphabetically */

SELECT INITCAP(sub_region), COUNT(city_name) AS cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
GROUP BY sub_region
ORDER BY sub_region;


| region                           | count |
|----------------------------------|-------|
| "Australia And New Zealand"      | 329   |
| "Central Asia"                   | 560   |
| "Eastern Asia"                   | 3162  |
| "Eastern Europe"                 | 2959  |
| "Latin America And The Caribbean"| 7204  |
| "Melanesia"                      | 60    |
| "Micronesia"                     | 15    |
| "Northern Africa"                | 1152  |
| "Northern America"               | 5844  |
| "Northern Europe"                | 2025  |
| "Polynesia"                      | 22    |
| "South-Eastern Asia"             | 2627  |
| "Southern Asia"                  | 6848  |
| "Southern Europe"                | 3238  |
| "Sub-Saharan Africa"             | 3223  |
| "Western Asia"                   | 1400  |
| "Western Europe"                 | 3952  |




/* List all of the countries and the total number of cities in the Northern Europe sub-region. List the country names in uppercase and order the list by the length of the country name and alphabetically in ascending order */

SELECT INITCAP(country_name), COUNT(*) AS number_of_cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
WHERE sub_region = 'northern europe'
GROUP BY country_name
ORDER BY LENGTH(country_name), country_name;


| country          | count |
|------------------|-------|
| "Jersey"         | 1     |
| "Latvia"         | 39    |
| "Norway"         | 127   |
| "Sweden"         | 148   |
| "Denmark"        | 75    |
| "Estonia"        | 20    |
| "Finland"        | 142   |
| "Iceland"        | 12    |
| "Ireland"        | 64    |
| "Lithuania"      | 61    |
| "Isle Of Man"    | 2     |
| "Faroe Islands"  | 29    |
| "United Kingdom" | 1305  |




/* List all of the countries and the total number of cities in the Southern Europe sub-region that were inserted in 2021. Capitalize the country names and order alphabetically by the LAST letter of the country name and the number of cities */

SELECT INITCAP(country_name), COUNT(*) AS number_of_cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
WHERE sub_region = 'southern europe' AND insert_date BETWEEN '2021-01-01' AND '2021-12-31'
GROUP BY country_name
ORDER BY substring(country_name, length(country_name), 1), number_of_cities;


| country                   | count |
|---------------------------|-------|
| "Andorra"                 | 5     |
| "Albania"                 | 11    |
| "Bosnia And Herzegovina"  | 15    |
| "Croatia"                 | 22    |
| "North Macedonia"         | 28    |
| "Malta"                   | 32    |
| "Serbia"                  | 58    |
| "Slovenia"                | 74    |
| "Greece"                  | 64    |
| "Portugal"                | 109   |
| "Spain"                   | 302   |
| "San Marino"              | 2     |
| "Montenegro"              | 12    |
| "Italy"                   | 542   |




/* List all of the countries in the region of Asia that did NOT have a city with an inserted date from June 2021 through Sept 2021 */

SELECT INITCAP(country_name)
FROM countries
LEFT JOIN cities
ON countries.country_code_2 = cities.country_code_2
AND cities.insert_date BETWEEN '2021-06-01' AND '2021-10-01'
WHERE countries.region = 'asia' 
AND cities.country_code_2 IS NULL;


| country            | 
|--------------------|
| "Kuwait"           |       
| "Singapore"        |       
| "Brunei Darussalam"|       
| "Macao"            | 




/* Classificate the cities by population using a 'CASE' statement */

SELECT initcap(city_name) AS city, to_char(population, '99G999G999') AS population,
CASE 
WHEN population > 10000000 THEN 'Megacity'
WHEN population > 1000000 THEN 'Supercity'
WHEN population > 100000 THEN 'City'
ELSE 'Small City'
END AS city_classification
FROM cities
WHERE population IS NOT NULL
ORDER BY population DESC
LIMIT 10;


| City         | Population   | Classification |
|--------------|--------------|----------------|
| Tokyo        | 37.732.000   | Megacity       |
| Jakarta      | 33.756.000   | Megacity       |
| Delhi        | 32.226.000   | Megacity       |
| Guangzhou    | 26.940.000   | Megacity       |
| Mumbai       | 24.973.000   | Megacity       |
| Manila       | 24.922.000   | Megacity       |
| Shanghai     | 24.073.000   | Megacity       |
| Sao Paulo    | 23.086.000   | Megacity       |
| Seoul        | 23.016.000   | Megacity       |
| Mexico City  | 21.804.000   | Megacity       |




/* Use SUBQUERIES to create a list of cities with a population larger than 5 million, where they speak English and show 1 of their currencies */

SELECT initcap(t1.city_name), to_char(t1.population, '99G999G999'), t1.country_code_2,
(SELECT COALESCE(
(SELECT initcap(currency_name)
FROM currencies AS t2
WHERE t1.country_code_2 = t2.country_code_2
LIMIT 1), 'Unknown')) AS currency
FROM cities AS t1
WHERE t1.population > 5000000 AND t1.country_code_2 IN
(SELECT t3.country_code_2
FROM languages AS t3
WHERE language = 'english')
ORDER BY t1.population DESC
LIMIT 10;


| City         | Population   | Country Code | Currency          |
|--------------|--------------|--------------|-------------------|
| Tokyo        | 37.732.000   | jp           | Yen               |
| Jakarta      | 33.756.000   | id           | Unknown           |
| Delhi        | 32.226.000   | in           | Indian Rupee      |
| Guangzhou    | 26.940.000   | cn           | Yuan Renminbi     |
| Mumbai       | 24.973.000   | in           | Indian Rupee      |
| Manila       | 24.922.000   | ph           | Philippine Peso   |
| Shanghai     | 24.073.000   | cn           | Yuan Renminbi     |
| Sao Paulo    | 23.086.000   | br           | Brazilian Real    |
| Seoul        | 23.016.000   | kr           | Won               |
| Mexico City  | 21.804.000   | mx           | Mexican Peso      |





/* List the country, city name, population and city name length for the city names that are palindromes in the Western Asia sub-region. Format the population with a thousands separator (1,000) and format the length of the city name in roman numerals. Order by the length of the city name in descending order and alphabetically in ascending order */

SELECT t1.country_name, t2.city_name, to_char(t2.population, '999G999') AS population, to_char(length(t2.city_name), 'RN') AS name_length
FROM countries AS t1
JOIN cities AS t2
ON t1.country_code_2 = t2.country_code_2
WHERE t2.city_name = reverse(t2.city_name)
AND t1.sub_region = 'western asia'
ORDER BY length(t2.city_name) DESC, t2.city_name ASC;


| country                | city    | population | code |
|------------------------|---------|------------|------|
| "yemen"                | "hajjah"| 46.568     | VI   |
| "syrian arab republic" | "hamah" | 696.863    | V    |
| "turkey"               | "kavak" | 21.692     | V    |
| "turkey"               | "kinik" | 29.803     | V    |
| "turkey"               | "tut"   | 10.161     | III  |




/* List all of the countries that end in 'stan'. Make your query case-insensitive and list whether the total population of the cities listed is an odd or even number for cities inserted in 2022. Order by whether the population value is odd or even in ascending order and country name in alphabetical order */

SELECT t1.country_name, to_char(SUM(t2.population), '99G999G999'),
CASE 
WHEN (SUM(t2.population) % 2) = 0 THEN 'Even'
ELSE 'Odd'
END AS odd_or_even
FROM countries AS t1
JOIN cities AS t2
ON t1.country_code_2 = t2.country_code_2
WHERE t1.country_name LIKE '%stan'
AND EXTRACT ('year' FROM t2.insert_date) = 2022
GROUP BY t1.country_name
ORDER BY odd_or_even, t1.country_name;


| country      | population  | code |
|--------------|-------------|------|
| afghanistan  | 6,006,530   | Even |
| kazakhstan   | 4,298,264   | Even |
| kyrgyzstan   | 1,017,644   | Even |
| pakistan     | 26,344,480  | Even |
| tajikistan   | 2,720,953   | Odd  |
| turkmenistan | 419,607     | Odd  |
| uzbekistan   | 3,035,547   | Odd  |




/* List the third most populated city ranked by region WITHOUT using limit or offset. List the region name, city name, population and order the results by region */

WITH city_rank AS (
SELECT t1.region, t2.city_name, t2.population AS third_largest_population,
DENSE_RANK() OVER (PARTITION BY t1.region ORDER BY t2.population DESC) AS rnk
FROM countries AS t1
JOIN cities AS t2
ON t1.country_code_2 = t2.country_code_2
WHERE t2.population IS NOT NULL
GROUP BY t1.region, t2.city_name, t2.population
)

SELECT initcap(region), initcap(city_name), to_char(third_largest_population, '99G999G999')
FROM city_rank
WHERE rnk = 3;


| continent | city     | population  |
|-----------|----------|-------------|
| Africa    | Kinshasa | 12,836,000  |
| Americas  | New York | 18,972,871  |
| Asia      | Delhi    | 32,226,000  |
| Europe    | Paris    | 11,060,000  |
| Oceania   | Brisbane | 2,360,241   |




/* List the bottom third of all countries in the Western Asia sub-region that speak Arabic. Include the row number and country name. Order by row number */

WITH bottom_third AS (
SELECT 
ROW_NUMBER() OVER(ORDER BY t1.country_name) AS rn,
NTILE(3) OVER(ORDER BY t1.country_name) AS nt,
t1.country_name
FROM countries AS t1
JOIN languages AS t2
ON t1.country_code_2 = t2.country_code_2
WHERE t1.sub_region = 'western asia' AND t2.language = 'arabic'
)
SELECT rn AS country_number, country_name
FROM bottom_third
WHERE nt = 3;


| number | country                |
|--------|------------------------|
| 9      | saudi arabia           |
| 10     | syrian arab republic   |
| 11     | united arab emirates   |
| 12     | yemen                  |




/* Create a query that lists country name, capital name, population, languages spoken and currency name for countries in the Northern Africa sub-region. There can be multiple currency names and languages spoken per country. Add multiple values for the same field into an array */

WITH get_values AS (
SELECT t1.country_name, t2.city_name, t2.population, array_agg(t3.language) AS languages, t4.currency_name AS currency
FROM countries AS t1
JOIN cities AS t2
ON t1.country_code_2 = t2.country_code_2
JOIN languages AS t3
ON t1.country_code_2 = t3.country_code_2
JOIN currencies AS t4
ON t1.country_code_2 = t4.country_code_2
WHERE t1.sub_region = 'northern africa'
AND t2.capital = 'True'
GROUP BY t1.country_name, t2.city_name, t2.population, t4.currency_name
)
SELECT *
FROM get_values;


Here is the transformed information in the requested format:

| number | country | capital  | population | languages                                         | currency        |
|--------|---------|----------|------------|---------------------------------------------------|-----------------|
| 1      | algeria | algiers  | 3415811    | {french, arabic, kabyle}                          | algerian dinar  |
| 2      | egypt   | cairo    | 20296000   | {arabic}                                          | egyptian pound  |
| 3      | libya   | tripoli  | 1293016    | {arabic}                                          | libyan dinar    |
| 4      | morocco | rabat    | 572717     | {arabic, tachelhit, "moroccan tamazight", french} | moroccan dirham |
| 5      | sudan   | khartoum | 7869000    | {arabic, english}                                 | sudanese pound  |
| 6      | tunisia | tunis    | 1056247    | {french, arabic}                                  | tunisian dinar  |




/* Produce a query that returns the city names for cities in the U.S. that were inserted on April, 28th 2022. List how many vowels and consonants are present in the city name and concatenate their percentage to the their respective count in parenthesis */

WITH letter_count AS (
SELECT city_name, length(city_name) AS string_length, length(regexp_replace(city_name, '[aeiou]','','gi')) AS consonant_count
FROM cities
WHERE insert_date = '2022-04-28' AND country_code_2 = 'us'
),
letter_diff AS (
SELECT city_name, string_length - consonant_count AS vowels, round(100*(string_length - consonant_count) / string_length::NUMERIC, 2)::float AS vowel_perc,
round(100*(consonant_count)::NUMERIC/string_length, 2)::float AS consonants_perc,
consonant_count AS consonants
FROM letter_count
)
SELECT INITCAP(city_name), vowels ||'('||vowel_perc||'%)' AS vowel_count_perc, consonants ||'('||consonants_perc||'%)' AS consonant_count_perc
FROM letter_diff
ORDER BY vowels DESC;


| city_name         | vowel_count_perc | consonant_count_perc |
|-------------------|------------------|----------------------|
| Jeffersonville    | 5(35.71%)        | 9(64.29%)            |
| Vadnais Heights   | 5(33.33%)        | 10(66.67%)           |
| Willowbrook       | 4(36.36%)        | 7(63.64%)            |
| Homewood          | 4(50%)           | 4(50%)               |
| Port Salerno      | 4(33.33%)        | 8(66.67%)            |
| Camano            | 3(50%)           | 3(50%)               |
| Cedar Hills       | 3(27.27%)        | 8(72.73%)            |
| Gladstone         | 3(33.33%)        | 6(66.67%)            |
| Whitehall         | 3(33.33%)        | 6(66.67%)            |
| Standish          | 2(25%)           | 6(75%)               |
| Grand Forks       | 2(18.18%)        | 9(81.82%)            |




/* List the most consecutive inserted dates and the capitalized city names for cities in Canada that where inserted in April 2022 */

CREATE TEMP TABLE get_dates AS (
SELECT DISTINCT ON (insert_date) insert_date, city_name
FROM cities
WHERE country_code_2 = 'ca' AND insert_date BETWEEN '2022-04-01' AND '2022-04-30'
ORDER BY insert_date
);

CREATE TEMP TABLE get_diff AS (
SELECT city_name, insert_date, EXTRACT('day' FROM insert_date) - ROW_NUMBER() OVER (ORDER BY insert_date) AS diff
FROM get_dates
);

CREATE TEMP TABLE get_diff_count AS (
SELECT city_name, insert_date, COUNT(*) OVER (PARTITION BY diff) AS diff_count
FROM get_diff
);

WITH get_rank AS (
SELECT DENSE_RANK() OVER (ORDER BY diff_count DESC) AS rnk, insert_date, city_name
FROM get_diff_count
)

SELECT insert_date AS most_consecutive_dates, initcap(city_name) AS city_name
FROM get_rank
WHERE rnk = 1
ORDER BY insert_date;


| date       | location     |
|------------|--------------|
| 2022-04-22 | South Dundas |
| 2022-04-23 | La Prairie   |
| 2022-04-24 | Elliot Lake  |
| 2022-04-25 | Lachute      |




/* Create a view that lists the month-year, the number of cities inserted for that month, a running city count total and the month over month percentage growth for 2021 */

CREATE VIEW growth_2021 AS (
WITH get_month_count AS (
SELECT date_trunc('month', insert_date) AS single_month, COUNT(*) AS monthly_count
FROM cities
WHERE EXTRACT ('year' FROM insert_date) = 2021
GROUP BY single_month
ORDER BY single_month),

get_running_total AS (
SELECT single_month::DATE, monthly_count, SUM(monthly_count) OVER (ORDER BY single_month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_num_cities
FROM get_month_count),

get_month_over_month AS (
SELECT single_month, monthly_count, total_num_cities, 
ROUND(100 * ((total_num_cities - Lag(total_num_cities, 1) OVER (ORDER BY single_month)) / Lag(total_num_cities, 1) OVER (ORDER BY single_month))::NUMERIC, 2) AS month_over_month
FROM get_running_total)

SELECT
to_char(single_month, 'Mon-YYYY') AS month_year,
to_char(monthly_count, '9G999') AS cities_inserted,
to_char(total_num_cities, '99G999') AS running_total,
to_char(month_over_month, 'sg99.99') || '%' AS month_over_month
FROM get_month_over_month);

SELECT *
FROM growth_2021;


| Month      | Value (in billions) | Cumulative Value (in billions)| Percentage Change |
|------------|---------------------|-------------------------------|-------------------|
| Jan-2021   | 1.471               | 1.471                         |                   |
| Feb-2021   | 1.291               | 2.762                         | +87.76%           |
| Mar-2021   | 1.485               | 4.247                         | +53.77%           |
| Apr-2021   | 1.508               | 5.755                         | +35.51%           |
| May-2021   | 1.509               | 7.264                         | +26.22%           |
| Jun-2021   | 1.395               | 8.659                         | +19.20%           |
| Jul-2021   | 1.394               | 10.053                        | +16.10%           |
| Aug-2021   | 1.481               | 11.534                        | +14.73%           |
| Sep-2021   | 1.452               | 12.986                        | +12.59%           |
| Oct-2021   | 1.446               | 14.432                        | +11.14%           |
| Nov-2021   | 1.378               | 15.810                        | +9.55%            |
| Dec-2021   | 1.472               | 17.282                        | +9.31%            |







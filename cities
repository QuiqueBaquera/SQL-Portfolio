/* Let's create the tables and add a SERIAL PRIMARY KEY to each one */

CREATE TABLE cities (
city_name VARCHAR(100),
latitude DECIMAL(9,6),
longitude DECIMAL(9,6),
country_code_2 CHAR(2),
capital BOOLEAN,
popultation INT,
insert_date DATE
)


ALTER TABLE cities
ADD city_id SERIAL PRIMARY KEY


CREATE TABLE countries (
country_name TEXT,
country_code_2 TEXT,
country_code_3 TEXT,
region TEXT,
sub_region TEXT,
intermediate_region TEXT
)


ALTER TABLE countries
ADD county_id SERIAL PRIMARY KEY


CREATE TABLE currencies (
country_code_2 TEXT,
currency_name TEXT,
currency_code TEXT
)


ALTER TABLE currencies
ADD currency_id SERIAL PRIMARY KEY


CREATE TABLE languages (
language TEXT,
country_code_2 TEXT
)


ALTER TABLE languages 
ADD languages_id SERIAL PRIMARY KEY




/* The data has to be cleaned, so we will do these steps with each of the four tables*/

UPDATE countries
SET country_name = TRIM(country_name);

BEGIN;
UPDATE countries
SET
country_name = TRANSLATE(country_name, '!¡?¿*$#%&', ''),
sub_region = TRANSLATE(sub_region, '¿?!¡$%€*#', ''),
region = TRANSLATE(region, '¿?!¡$%€*#', ''),
intermediate_region = TRANSLATE(intermediate_region, '¿?!¡$%€*#', '');
COMMIT;


UPDATE countries
SET
	country_name = LOWER(country_name),
	country_code_2 = LOWER(country_code_2),
	country_code_3 = LOWER(country_code_3),
	region = LOWER(region),
	sub_region = LOWER(sub_region), 
	intermediate_region = LOWER(intermediate_region);




/* Now we have to see if there are duplicates in the tables and remove them */

SELECT country_code_2, COUNT(*)
FROM countries
GROUP BY country_code_2
HAVING COUNT(*) > 1;


| country_code_2 | count |
|----------------|-------|
| "al"           | 2     |
| "cn"           | 3     |
| "sa"           | 2     |
| "ie"           | 2     |
| "ly"           | 2     |
| "mo"           | 2     |
| "re"           | 2     |
| "ph"           | 2     |
| "zw"           | 2     |
| "az"           | 2     |
| "kw"           | 2     |
| "cy"           | 3     |
| "rs"           | 2     |
| "mh"           | 2     |




/* Let's delete the duplicates */

DELETE FROM countries AS table_1
USING countries AS table_2
WHERE table_1.country_id > table_2.country_id
AND table_1.country_code_2 = table_2.country_code_2;




/* List all of the regions and the total number of countries in each region. Order by country count in descending order and capitalize the region name */

SELECT INITCAP(region), COUNT(*) 
FROM countries
GROUP BY region
ORDER BY COUNT(*) DESC;


| continent  | count |
|------------|-------|
| "Africa"   | 59    |
| "Americas" | 57    |
| "Asia"     | 50    |
| "Europe"   | 48    |
| "Oceania"  | 26    |
| "Antartica"| 1     |




/* List all of the sub-regions and the total number of cities in each sub-region. Order by sub-region name alphabetically */

SELECT INITCAP(sub_region), COUNT(city_name) AS cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
GROUP BY sub_region
ORDER BY sub_region;


| region                           | count |
|----------------------------------|-------|
| "Australia And New Zealand"      | 329   |
| "Central Asia"                   | 560   |
| "Eastern Asia"                   | 3162  |
| "Eastern Europe"                 | 2959  |
| "Latin America And The Caribbean"| 7204  |
| "Melanesia"                      | 60    |
| "Micronesia"                     | 15    |
| "Northern Africa"                | 1152  |
| "Northern America"               | 5844  |
| "Northern Europe"                | 2025  |
| "Polynesia"                      | 22    |
| "South-Eastern Asia"             | 2627  |
| "Southern Asia"                  | 6848  |
| "Southern Europe"                | 3238  |
| "Sub-Saharan Africa"             | 3223  |
| "Western Asia"                   | 1400  |
| "Western Europe"                 | 3952  |




/* List all of the countries and the total number of cities in the Northern Europe sub-region. List the country names in uppercase and order the list by the length of the country name and alphabetically in ascending order */

SELECT INITCAP(country_name), COUNT(*) AS number_of_cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
WHERE sub_region = 'northern europe'
GROUP BY country_name
ORDER BY LENGTH(country_name), country_name;


| country          | count |
|------------------|-------|
| "Jersey"         | 1     |
| "Latvia"         | 39    |
| "Norway"         | 127   |
| "Sweden"         | 148   |
| "Denmark"        | 75    |
| "Estonia"        | 20    |
| "Finland"        | 142   |
| "Iceland"        | 12    |
| "Ireland"        | 64    |
| "Lithuania"      | 61    |
| "Isle Of Man"    | 2     |
| "Faroe Islands"  | 29    |
| "United Kingdom" | 1305  |




/* List all of the countries and the total number of cities in the Southern Europe sub-region that were inserted in 2021. Capitalize the country names and order alphabetically by the LAST letter of the country name and the number of cities */

SELECT INITCAP(country_name), COUNT(*) AS number_of_cities
FROM countries
JOIN cities
ON countries.country_code_2 = cities.country_code_2
WHERE sub_region = 'southern europe' AND insert_date BETWEEN '2021-01-01' AND '2021-12-31'
GROUP BY country_name
ORDER BY substring(country_name, length(country_name), 1), number_of_cities;


| country                   | count |
|---------------------------|-------|
| "Andorra"                 | 5     |
| "Albania"                 | 11    |
| "Bosnia And Herzegovina"  | 15    |
| "Croatia"                 | 22    |
| "North Macedonia"         | 28    |
| "Malta"                   | 32    |
| "Serbia"                  | 58    |
| "Slovenia"                | 74    |
| "Greece"                  | 64    |
| "Portugal"                | 109   |
| "Spain"                   | 302   |
| "San Marino"              | 2     |
| "Montenegro"              | 12    |
| "Italy"                   | 542   |




/* List all of the countries in the region of Asia that did NOT have a city with an inserted date from June 2021 through Sept 2021 */

SELECT INITCAP(country_name)
FROM countries
LEFT JOIN cities
ON countries.country_code_2 = cities.country_code_2
AND cities.insert_date BETWEEN '2021-06-01' AND '2021-10-01'
WHERE countries.region = 'asia' 
AND cities.country_code_2 IS NULL;


| country            | 
|--------------------|
| "Kuwait"           |       
| "Singapore"        |       
| "Brunei Darussalam"|       
| "Macao"            | 




/* List the country, city name, population and city name length for the city names that are palindromes in the Western Asia sub-region. Format the population with a thousands separator (1,000) and format the length of the city name in roman numerals. Order by the length of the city name in descending order and alphabetically in ascending order */

SELECT t1.country_name, t2.city_name, to_char(t2.population, '999G999') AS population, to_char(length(t2.city_name), 'RN') AS name_length
FROM countries AS t1
JOIN cities AS t2
ON t1.country_code_2 = t2.country_code_2
WHERE t2.city_name = reverse(t2.city_name)
AND t1.sub_region = 'western asia'
ORDER BY length(t2.city_name) DESC, t2.city_name ASC;


| country                | city    | population | code |
|------------------------|---------|------------|------|
| "yemen"                | "hajjah"| 46.568     | VI   |
| "syrian arab republic" | "hamah" | 696.863    | V    |
| "turkey"               | "kavak" | 21.692     | V    |
| "turkey"               | "kinik" | 29.803     | V    |
| "turkey"               | "tut"   | 10.161     | III  |




